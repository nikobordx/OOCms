OOCms Version 0.2

OOCms Quick Guide

GENERAL
-------
OOCms is a CMS(Content Management System) wich can run as a CGI application(thanks to OOCgi) on any server that supports parsed header output. It is completely customizable, 
thanks to a "template" system described below. When you load the CGI page with your browser, OOCms parses the query string that you pass in the address bar. It looks for a "page" 
argument, wich passes the name of the template to open and a "subpage" argument wich passes the name of the thtml and db file to parse. For example, oocms.cgi?page=news&subpage=allNews 
would make oocms look for a template named "news" and open the allNews.thtml and allNews.db file located in the templates/news/. If no subpage argument is passed, index is guessed. 
Similarly, if no page argument is passed, IndexTemplate is guessed.

DB FILES
--------
DB files are the files wich "link" the database files to the thtml file. Using them, you can specify variables of three types that will later be used in the thtml files. There MUST be a db 
file for each thtml file, even if it is empty. There are currently three commands that you can use in a db file. To use a command, you just have to write [CommandName]: [Arg1],[Arg2],...
in your db file. Commands are executed in the order they are written. 
The first command is the Database command. Its first parameter is the name of the database to open, without the .csv extention. 
There is a second, optional argument. The second argument can either be DESCORDER[columnName] or ASCORDER[columnName]. 
On the first case, the database is ordered in a descending order based on the column named `columnName`. On the other case, the exact same happens but with ascending order. 
The second command is Column. It takes two arguments and is in fact a variable declaration. What the command does is that it sets a variable of type `Array`. 
Its first argument is the name of the variable to set. The second one is the name of the column in the currently opened database. 
Next, there is the Count command. Like the Column command, it is a variable declaration, only this time of type `Int`. It takes one parameter, the name of the variable to set and initializes 
it with the number of lines of the currently opened database.
Finally, there is the Line command. The first and second arguments it takes are used to determine wich line will be selected. The first one is the name of the column that OOCms will look for
the second one in. So, if the arguments are id and 4, OOCms will look into column 'id' for a value '4' and will return the line wich matches this as a Map. The Map's keys will be the database's
columns' names. So, to continue with this example, if we pass someLine as a third argument to Line, wich is the name of the new variable, someLine(id) will be equal to '4'


NOTE 1: You SHOULD(untested, but code is structured that way) be able to open more than one databases in a single db file and thus could do something like:

Database: aDb
Column: a_id,ID
Column: a_post,POST
Line: ID,4,a_line
Database: bDb
Column: b_id,ID
Column: b_post,POST
Line: ID,4,b_line

Note: We could say that there are four variable types, as each field of a Map or an Array is considered to be a `String`
THTML FILES
------------
THTML files are like standard HTML files, with a few differences. Using their DB files, they can show database fields and thus return dynamicly generated html code, after being parsed by OOCms.
After generating the code returned by a THTML file, OOCms will replace it in a specific file, design/page.html. Any occurence of __[]__ will be replaced with this code.
--General Syntax--
The syntax of THTML code is just like the one in DB file. The only difference is that for THTML code to be parsed it must be between a __{ and }__ block and that the functions are different.
The functions in DB files are used to set variables, while in THTML files to show and edit them.
--Arrays, Maps and Indexes--
When you wish to use an array's or a map's field and not the whole array or map, you must specify the index of the item to use. For arrays, this is done by passing a numerical value or an Int
variable in parenthesis after the array's name. For example, you must do something like ArrayName(0) or ArrayName(someCount). For maps, it is the exact same thing, only you must pass a String value
or variable, for example MapName(someString) or MapName(SomeArray(5))
THere are two system maps available to your scripts by default, named _GET and _POST. They containt the HTTP request's get and post data
--Functions--
There are currently only two functions available in THTML files.
The first one is the Show function. It takes one parameter, wich is a String variable wich contents to show. For example, you can do __{Show: _GET(page)}__
The second one is the ArrayPrint function, wich prints the contents of an Array (not a Map, onyl an ARRAY). For example, you can do __{ArrayPrint: SomeDbColumn}__
There should be a new function available soon, MapPrint
--Looping--
There is one more cool feature in thtml files. You can loop through a range of numbers. To do that, you actually initialize a variable of type `Int` with a certain value and loop through some 
code until you reach another value (you can loop both ways; from smaller to bigger numbers or from bigger to smaller numbers). All thtml code found between ~| and |~ is looped. 
To specify how many times you wish to loop through the code, you must write ~|[NEW_INT_VAR->STARTVALUE->ENDVALUE] looping code here|~, where STARTVALUE and ENDVALUE are either `Int` variables or numbers.
Here is a sample thtml script to illustrate all that

        ~|[i->0->5]<div id="news">
            <h1>__{Show: Title(i)}__</h1>
            <p>Posted at __{Show: Date(i)}__</p>
            <br/>
            <p>__{Show: Contents(i)}__</p>
        </div>|~
        <a href="something ^^">This will not be looped! __{Show: NewsCount}__ hurrays!</a>